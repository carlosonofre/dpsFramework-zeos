unit TestunMocks;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, DPsTypes, TypInfo, SysUtils, DPsDataManager, Graphics, unMocks,
  System.Classes;

//  Windows, SysUtils, Classes,TestFramework, TestExtensions,TypInfo,Graphics,
//  DPsDataManager,DPsTypes,Dialogs,Controls, ZDbcIntfs;



type
  // Test methods for class TMasterDatamanagerTest

  TestTMasterDatamanagerTest = class(TTestCase)
  strict private
    FMasterDatamanagerTest: TMasterDatamanagerTest;
  public

  published

    procedure TestaConstrutorBase_Firebird;
    (* Testes de criação de tipos na base (Firibird = Domains )  *)
    procedure TesteSeTipoEnumeradoExiste_Firebird;
    procedure TesteSeTipoBooleanExiste_Firebird;
    procedure TesteSeTipoSetDeEnumeracaoExiste_Firebird;



   (* desabilitado devido a alterações no projeto *)
    procedure TesteSeTipoDoubleExiste_Firebird;
    procedure TesteSeTipoBlobExiste_Firebird;
    procedure TesteSeTipoCurrencyExiste_Firebird;
    procedure TesteSeTipoDateExiste_Firebird;
    procedure TesteSeTipoDateTimeExiste_Firebird;
    (* Testes de Criação de tabelas no banco *)
    procedure TesteSeTabelaFoiCriada_Firebird;

    (* Testes se campos foram criados corretamente *)
    procedure TesteSeCampoFoiCriado_Firebird;

    (* Testes se os índices foram criados corretamente *)
    procedure TesteSeIndiceFoiCriado_Firebird;

    (* Testes se os constraints foram criados corretamente *)
    procedure TesteSeChavePrimariaFoiCriada_Firebird;
    procedure TesteSeChaveEstrangeiraFoiCriada_Firebird;
    procedure TesteSeChaveUnicaFoiCriada_Firebird;
//    procedure TesteSeCampoExisteEmTabela_Firebird;
//    procedure CreateModelComIndices;
//    procedure CreateModelComConstraint;

    (* Testes de conversão de tipos de dados do Firebird ---->  Delphi *)
    (* STRINGS  *)
    procedure TestConversaoTipo_DatabaseParaDelphi_CHAR_nativo_size_default;
    procedure TestConversaoTipo_DatabaseParaDelphi_CHAR_nativo_size_100;
    procedure TestConversaoTipo_DatabaseParaDelphi_CHAR_nativo_size_256;

    procedure TestConversaoTipo_DatabaseParaDelphi_CHAR_registrado_size_default;
    procedure TestConversaoTipo_DatabaseParaDelphi_CHAR_registrado_size_100;
    procedure TestConversaoTipo_DatabaseParaDelphi_CHAR_registrado_size_256;

    procedure TestConversaoTipo_DatabaseParaDelphi_VARCHAR_nativo_size_default;
    procedure TestConversaoTipo_DatabaseParaDelphi_VARCHAR_nativo_size_100;
    procedure TestConversaoTipo_DatabaseParaDelphi_VARCHAR_nativo_size_256;

    procedure TestConversaoTipo_DatabaseParaDelphi_VARCHAR_registrado_size_default;
    procedure TestConversaoTipo_DatabaseParaDelphi_VARCHAR_registrado_size_100;
    procedure TestConversaoTipo_DatabaseParaDelphi_VARCHAR_registrado_size_256;

    procedure TestConversaoTipo_DatabaseParaDelphi_BLOB_nativo;
    procedure TestConversaoTipo_DatabaseParaDelphi_BLOB_registrado;

    (* INTEIROS  *)
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Byte;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_ShortInt;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Word;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Smallint;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Cardinal_e_LongWord;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_LongInt_e_Integer;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Int64;

    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Byte;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_ShortInt;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Word;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Smallint;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Cardinal_e_LongWord;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_LongInt_e_Integer;
    procedure TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Int64;
    procedure TestConversaoTipo_DatabaseParaDelphi_SMALLINT_nativo;
    procedure TestConversaoTipo_DatabaseParaDelphi_BIGINT_nativo;

    (* FLOAT  *)
    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Extended;
    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Double;
    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Currency;
    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Single;

    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Extended;
    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Double;
    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Currency;
    procedure TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Single;

    procedure TestConversaoTipo_DatabaseParaDelphi_DATE_nativo;
    procedure TestConversaoTipo_DatabaseParaDelphi_TIME_nativo;
    procedure TestConversaoTipo_DatabaseParaDelphi_TIMESTAMP_nativo;

    procedure TestConversaoTipo_DatabaseParaDelphi_DATE_registrado;
    procedure TestConversaoTipo_DatabaseParaDelphi_TIME_registrado;
    procedure TestConversaoTipo_DatabaseParaDelphi_TIMESTAMP_registrado;

    procedure TestConversaoTipo_DatabaseParaDelphi_FLOAT_nativo;
    procedure TestConversaoTipo_DatabaseParaDelphi_FLOAT_registrado;

    procedure TestConversaoTipo_DatabaseParaDelphi_DOUBLE_PRECISION_nativo;



    (* Teste de rotinas de conversão do Delphi para o Banco de dados  ---> Firebird *)
    (* Strings *)
    procedure TestConversaoTipo_DelphiParaDatabase_Char_default_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_Char_100_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_Char_256_nativo;

    procedure TestConversaoTipo_DelphiParaDatabase_Char_default_registrado;
    procedure TestConversaoTipo_DelphiParaDatabase_Char_100_registrado;
    procedure TestConversaoTipo_DelphiParaDatabase_Char_256_registrado;

    procedure TestConversaoTipo_DelphiParaDatabase_ShortString_default_native;
    procedure TestConversaoTipo_DelphiParaDatabase_ShortString_100_native;
    procedure TestConversaoTipo_DelphiParaDatabase_ShortString_256_native;

    procedure TestConversaoTipo_DelphiParaDatabase_ShortString_default_registrado;
    procedure TestConversaoTipo_DelphiParaDatabase_ShortString_100_registrado;
    procedure TestConversaoTipo_DelphiParaDatabase_ShortString_256_registrado;

    (* BIGINT - INT64 *)
    procedure TestConversaoTipo_DelphiParaDatabase_Int64_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_Int64_registrado;

    procedure TestConversaoTipo_DelphiParaDatabase_Cardinal_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_Cardinal_registrado;

    procedure TestConversaoTipo_DelphiParaDatabase_LongWord_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_LongWord_registrado;

    (* INTEGER *)
    procedure TestConversaoTipo_DelphiParaDatabase_Integer_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_Integer_registrado;

    procedure TestConversaoTipo_DelphiParaDatabase_Longint_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_Longint_registrado;

    procedure TestConversaoTipo_DelphiParaDatabase_Word_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_Word_registrado;

    (* SMALLINT *)
    procedure TestConversaoTipo_DelphiParaDatabase_SmallInt_nativo;
    procedure TestConversaoTipo_DelphiParaDatabase_SmallInt_registrado;

    procedure TestConversaoTipo_DelphiParaDatabase_ShortInt;
    procedure TestConversaoTipo_DelphiParaDatabase_Byte;

    (* ponto flutuante *)
    procedure TestConversaoTipo_DelphiParaDatabase_Single;
    procedure TestConversaoTipo_DelphiParaDatabase_Currency_personalizado;

    procedure TestConversaoTipo_DelphiParaDatabase_Double;
    procedure TestConversaoTipo_DelphiParaDatabase_Extended;
    procedure TestConversaoTipo_DelphiParaDatabase_Extended_Personalizado;
    (* data *)
    procedure TestConversaoTipo_DelphiParaDatabase_TDate;
    procedure TestConversaoTipo_DelphiParaDatabase_TTime;
    procedure TestConversaoTipo_DelphiParaDatabase_TDateTime;
    (* variants *)
    procedure TestConversaoTipo_DelphiParaDatabase_TBitMap;



    (* Grupo de testes de rotinas geração de classes a partir de um banco de dados *)
    procedure TestCriacaoDeTipoAPartirDo_Firebird;

  end;


const
  tabelaDBModelTeste        =  'DBModelTeste';
  tabelaDBModelDetalheTeste =  'DBModelDetalheTeste';

implementation


//procedure TestTMasterDatamanagerTest.TestaCampoInteiro_Firebird;
//begin
//  CheckEquals(True,False,'Erro falso');
//end;

procedure TestTMasterDatamanagerTest.TestaConstrutorBase_Firebird;
var
  baseExiste:boolean;
  base:string;
begin
  base := ExtractFilePath(ParamStr(0))+'Dados\'+'teste_unitario.fdb';

  DeleteFile(base);
  baseExiste := FileExists(base);
  CheckEquals(False,baseExiste,'A Base de testes não pode re-criada, possivelmente existem conexões abertas com uma base de teste pré-existente!');
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FileExists(base),'Erro,Banco de dados não foi criado corretamente!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoEnumeradoExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('ENUMERACAO'),'Tipo de campo de Enumeração não foi criado como esperado!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoBooleanExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('BOOLEAN'),'Tipo de campo Boolean não foi criado como esperado!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoSetDeEnumeracaoExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('SETDEENUMERACAO'),'Tipo de campo Set de Enumeração não foi criado como esperado!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoDoubleExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('DPS_DOUBLE'),'Tipo de campo Double não foi criado como esperado!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoBlobExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('TBITMAP'),'Tipo de campo Blob não foi criado como esperado!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoCurrencyExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('DINHEIRO'),'Tipo de campo Currency não foi criado como esperado!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoDateTimeExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('TDATETIME'),'Tipo de campo DateTime não foi criado como esperado!');
end;

procedure TestTMasterDatamanagerTest.TesteSeTipoDateExiste_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.OwnTypeExists('TDATE'),'Tipo de campo Date não foi criado como esperado!');
end;

(* teste de criação de estrutura *)
procedure TestTMasterDatamanagerTest.TesteSeTabelaFoiCriada_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.TableExists('DBMODELTESTE'),'A Tabela DBModelTeste não foi criada como esperado!');
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_BIGINT_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'BIGINT';
    BasicTypeKind          := tkInt64;
    DataSize               := 0;
    DataSizeScale          := 0;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Int64',DataTypeName  ,'Validação 1');
    CheckEquals('Int64',FullNameDelphiType,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_BLOB_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'BLOB';
    BasicTypeKind          := tkClass;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Blob' ,DataTypeName       ,'Valida Saida nome Tipo');
    CheckEquals('TBlobData',FullNameDelphiType ,'Valida Saida Delphi');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_BLOB_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'BLOB_SUB_TYPE_BINARY';
    BasicTypeKind          := tkClass;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('BLOB_SUB_TYPE_BINARY',DataTypeName  ,'Valida Saida nome tipo');
    CheckEquals('TBlobData',FullNameDelphiType       ,'Valida Saida Delphi');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_CHAR_nativo_size_100;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkChar;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Char';
    DataSize               := 100;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('Char'   ,DataTypeName              ,'1º Char - Tamanho 100');
    CheckEquals('Char[100]',FullNameDelphiType   ,'2º Char - Tamanho 100');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_CHAR_nativo_size_256;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkChar;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Char';
    DataSize               := 256;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('Char',DataTypeName ,'1º Char - Tamanho maior que 255');
    CheckEquals('TBlobData',FullNameDelphiType ,'2º Char - Tamanho maior que 255');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_CHAR_nativo_size_default;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade

  with data_reflection do
  begin
    BasicTypeKind          := tkChar;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Char';
    SetDefaultsTypeReflection(data_reflection,BasicTypeKind,FMasterDatamanagerTest.DmReflections);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('Char'   ,DataTypeName      ,'1º Char - Tamanho Default 0 ');
    CheckEquals('Char'   ,FullNameDelphiType,'2º Char - Tamanho Default 0 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_CHAR_registrado_size_100;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkChar;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Char_100';
    DataSize               := 100;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('Char_100'    ,DataTypeName     ,'1º Char - Tamanho 100');// já registrei equivalente antes
    CheckEquals('Char[100]',FullNameDelphiType  ,'2º Char - Tamanho 100');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_CHAR_registrado_size_256;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkChar;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Char_256';
    DataSize               := 256;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('Char_256' ,DataTypeName          ,'1º Char - Tamanho > 255');
    CheckEquals('TBlobData',FullNameDelphiType    ,'2º Char - Tamanho > 255');// - dominio será blob
  end;

end;

(* Campos do tipo string não vem do banco sem tamanho fixo, se vier deve resultar em um blob *)
procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_CHAR_registrado_size_default;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    TypeReflection         := trDatabaseToDelphi;
    BasicTypeKind          := tkChar;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Char_N';
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('Char_N' ,DataTypeName          ,'1º Char - Tamanho Default 0 ');// criar tipo no delphi
    CheckEquals('Char' ,FullNameDelphiType      ,'2º Char - Tamanho Default 0 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_DATE_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    BasicTypeKind          := tkFloat;
    DataTypeName           := 'DATE';
    DataSize               := -1;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_TDate',DataTypeName   ,'Validação 1');
    CheckEquals('TDate',FullNameDelphiType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_DATE_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'DATE_registrado';
    DataSize               := -1;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('DATE_registrado',DataTypeName ,'Validação 1');
    CheckEquals('TDate',FullNameDelphiType     ,'Validação 2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_DOUBLE_PRECISION_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
   // TypeReflection         := trDatabaseToDelphi;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'DOUBLE PRECISION';
    DataSize               := 18;
    DataSizeScale          := 18;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Double',DataTypeName   ,'Validação  1');
    CheckEquals('Double',FullNameDelphiType ,'Validação  2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_FLOAT_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'FLOAT';
    DataSize               := 15;
    DataSizeScale          := 7;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Double',DataTypeName    ,'Validação 1');
    CheckEquals('Double',FullNameDelphiType  ,'Validação 2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_FLOAT_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'FLOAT_registrado';
    DataSize               := 15;
    DataSizeScale          := 7;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('FLOAT_registrado',DataTypeName    ,'Validação 1 float registrado falhou!');
    CheckEquals('Double',FullNameDelphiType        ,'Validação 2 float registrado falhou!');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Byte;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'INTEGER';
    BasicTypeKind          := tkInteger;
    NativeType             := ntDelphiAndDatabase;
    DataSize               := 0;
    DataSizeScale          := 255;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Byte',DataTypeName   ,'Validação 1 ');
    CheckEquals('Byte',FullNameDelphiType ,'Validação 2 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Cardinal_e_LongWord;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Cardinal';
    NativeType             := ntDelphi;
    BasicTypeKind          := tkInt64;
    DataSize               := 0;
    DataSizeScale          := 4294967295;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Cardinal',DataTypeName    ,'Validação 1 ');
    CheckEquals('Cardinal',FullNameDelphiType  ,'Validação 2 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Int64;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Integer';
    BasicTypeKind          := tkInt64;
    DataSize               := 0;
    DataSizeScale          := 0;
    NativeType             := ntDelphiAndDatabase;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Int64',DataTypeName   ,'Validação 1 ');
    CheckEquals('Int64',FullNameDelphiType ,'Validação 2 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_LongInt_e_Integer;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    (* pulo do gato, quando o size for zero ou seja default,a conversão retorna Int64 *)
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Integer';
    NativeType             := ntDelphiAndDatabase;
    BasicTypeKind          := tkInteger;
    DataSize               := low(integer);
    DataSizeScale          := high(Integer);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Integer',DataTypeName   ,'Validação 1 ');
    CheckEquals('Integer',FullNameDelphiType ,'Validação 2 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_ShortInt;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Shortint';
    NativeType             :=  ntDatabase;
    BasicTypeKind          :=  tkInteger;
    DataSize               := -128;
    DataSizeScale          :=  127;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Shortint',DataTypeName   ,'Validação 1 ');
    CheckEquals('Shortint',FullNameDelphiType ,'Validação 2 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Smallint;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Smallint';
    BasicTypeKind          := tkInteger;
    NativeType             := ntDelphi;
    DataSize               := -32768;
    DataSizeScale          :=  32767;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Smallint',DataTypeName   ,'Validação 1 ');
    CheckEquals('Smallint',FullNameDelphiType ,'Validação 2 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_nativo_Word;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Word';
    NativeType             := ntDelphi;
    BasicTypeKind          := tkInteger;
    DataSize               := 0;
    DataSizeScale          := 65535;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Word',DataTypeName   ,'Validação 1 ');
    CheckEquals('Word',FullNameDelphiType ,'Validação 2 ');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Byte;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'INTEGER_BYTE';
    BasicTypeKind          := tkInteger;
    DataSize               := Low(byte);
    DataSizeScale          := High(byte);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_BYTE',DataTypeName,'Validação 1 ');
    CheckEquals('Byte',FullNameDelphiType  ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Cardinal_e_LongWord;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'INTEGER_CARDINAL';
    BasicTypeKind          := tkInt64;
    DataSize               := Low(Cardinal);
    DataSizeScale          := High(Cardinal);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_CARDINAL',DataTypeName  ,'Validação 1 ');
    CheckEquals('Cardinal',FullNameDelphiType    ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Int64;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'INTEGER_INT64';
    BasicTypeKind          := tkInt64;
    DataSize               := 0;
    DataSizeScale          := 0;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_INT64',DataTypeName   ,'Validação 1 ');
    CheckEquals('Int64',FullNameDelphiType     ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_LongInt_e_Integer;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'INTEGER_INTEGER';
    BasicTypeKind          := tkInt64;
    DataSize               := Low(Integer);
    DataSizeScale          := High(Integer);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_INTEGER',DataTypeName  ,'Validação 1 ');
    CheckEquals('Integer',FullNameDelphiType    ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_ShortInt;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'INTEGER_SHORTINT';
    BasicTypeKind          := tkInteger;
    DataSize               := Low(shortint);
    DataSizeScale          := High(shortint);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_SHORTINT',DataTypeName ,'Validação 1 ');
    CheckEquals('Shortint',FullNameDelphiType   ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Smallint;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    (* pulo do gato, quando o size for zero ou seja default,a conversão retorna Int64 *)
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    BasicTypeKind          := tkInt64;
    DataSize               := Low(smallint);
    DataSizeScale          := High(smallint);
    DataTypeName           := 'INTEGER_SMALLINT';
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_SMALLINT',DataTypeName  ,'Validação 1 ');
    CheckEquals('Smallint',FullNameDelphiType ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_INTEGER_registrado_Word;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'INTEGER_WORD';
    BasicTypeKind          := tkInt64;
    DataSize               := Low(word);
    DataSizeScale          := High(word);
    NativeType             := ntUnknow;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_WORD',DataTypeName  ,'Validação 1 ');
    CheckEquals('Word',FullNameDelphiType    ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Currency;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataSize               := 15;
    DataSizeScale          := 4;
    DataTypeName           := 'NUMERIC';
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Currency' ,DataTypeName     ,'Validação 1');
    CheckEquals('Currency' ,FullNameDelphiType   ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Double;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'NUMERIC';
    DataSize               := 18;
    DataSizeScale          := 18;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Double' ,DataTypeName   ,'Validação 1');
    CheckEquals('Double' ,FullNameDelphiType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Extended;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'NUMERIC';
    DataSize               := 19;
    DataSizeScale          := 15;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Extended' ,DataTypeName    ,'Validação 1');
    CheckEquals('Extended' ,FullNameDelphiType  ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_nativo_Single;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataSize               := 3;
    DataSizeScale          := 3;
    DataTypeName           := 'NUMERIC';
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Single',DataTypeName    ,'Validação 1');
    CheckEquals('Single',FullNameDelphiType  ,'Validação 2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Currency;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'NUMERIC_CURRENCY';
    BasicTypeKind          := tkFloat;
    DataSize               := 15;
    DataSizeScale          := 4;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('NUMERIC_CURRENCY' ,DataTypeName   ,'Validação 1');
    CheckEquals('Currency' ,FullNameDelphiType     ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Double;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'NUMERIC_DOUBLE';
    BasicTypeKind          := tkFloat;
    DataSize               := 18;
    DataSizeScale          := 18;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('NUMERIC_DOUBLE' ,DataTypeName  ,'Validação 1');
    CheckEquals('Double' ,FullNameDelphiType    ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Extended;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'NUMERIC_EXTENDED';
    BasicTypeKind          := tkFloat;
    DataSize               := 19;
    DataSizeScale          := 15;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('NUMERIC_EXTENDED' ,DataTypeName  ,'Validação 1');
    CheckEquals('Extended' ,FullNameDelphiType    ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_NUMERIC_registrado_Single;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'NUMERIC_SINGLE';
    BasicTypeKind          := tkFloat;
    DataSize               := 3;
    DataSizeScale          := 3;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('NUMERIC_SINGLE' ,DataTypeName  ,'Validação 1');
    CheckEquals('Single' ,FullNameDelphiType    ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_SMALLINT_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'SMALLINT';
    BasicTypeKind          := tkInt64;
    DataSize               := low(smallint);
    DataSizeScale          := high(smallint);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_Smallint',DataTypeName   ,'Validação 1');
    CheckEquals('Smallint',FullNameDelphiType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_TIMESTAMP_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'TIMESTAMP';
    DataSize               := -3;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_TDateTime',DataTypeName   ,'Validação 1');
    CheckEquals('TDateTime',FullNameDelphiType ,'Validação 2');
  end;
end;


procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_TIMESTAMP_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'TIMESTAMP_registrado';
    DataSize               := -3;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('TIMESTAMP_registrado',DataTypeName  ,'Validação 1');
    CheckEquals('TDateTime',FullNameDelphiType       ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_TIME_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'TIME';
    DataSize               := -2;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('dps_TTime',DataTypeName    ,'Validação 1');
    CheckEquals('TTime',FullNameDelphiType  ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_TIME_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'TIME_registrado';
    DataSize               := -2;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('TIME_registrado',DataTypeName ,'Validação 1');
    CheckEquals('TTime',FullNameDelphiType     ,'Validação 2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_VARCHAR_nativo_size_100;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkString;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'varchar';
    DataSize               := 100;
    (* tipo será registrado na unit que será gerada no projeto pelo wizard *)
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('varchar'    ,DataTypeName        ,'1º String Tamanho 100');
    CheckEquals('String[100]',FullNameDelphiType,'2º String Tamanho 100');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_VARCHAR_nativo_size_256;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkString;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'varchar';
    DataSize               := 256;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('varchar'   ,DataTypeName      , format('1º varchar Tamanho [%d] ',[DataSize]));
    CheckEquals('TBlobData',FullNameDelphiType ,'2º esperava TBlobData');
  end;
end;

(* situacao pouco provável tipo varchar sem tamanho específico *)
procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_VARCHAR_nativo_size_default;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkString;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'Varchar';
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('Varchar',DataTypeName      ,'1º Varchar Tamanho default');
    CheckEquals('String' ,FullNameDelphiType,'2º String Tamanho default 0 String');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_VARCHAR_registrado_size_100;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkString;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'varchar_100';
    DataSize               := 100;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('varchar_100',DataTypeName       ,'Validação 1 - Nome do Tipo');
    CheckEquals('String[100]',FullNameDelphiType ,'Validação 2 -  String Tamanho 100');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_VARCHAR_registrado_size_256;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkString;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'varchar_256';
    DataSize               := 256;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('varchar_256',DataTypeName       ,'Validação 1 - Nome do Tipo');
    CheckEquals('TBlobData'  ,FullNameDelphiType ,'Validação 2 - String Tamanho > 255');
  end;
end;

(* neste caso o banco só retorna valores entre 1..255 se for diferente disso, vai ser Tblobdata no Delphi*)
procedure TestTMasterDatamanagerTest.TestConversaoTipo_DatabaseParaDelphi_VARCHAR_registrado_size_default;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDatabaseToDelphi;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    BasicTypeKind          := tkString;
    ClassOrTableName       := 'TabelaQualquer';
    PropertyOrColumnName   := 'ColunaQualquer';
    DataTypeName           := 'varchar_def';
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('varchar_def',DataTypeName   ,'Validação 1 - Nome do Tipo');
    CheckEquals('String',FullNameDelphiType  ,'Validação 2 -  String Tamanho default');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Byte;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Byte';
    DataSize               := Low(Byte);
    DataSizeScale          := High(Byte);
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('BYTE',DataTypeName         ,'Validação 1');
    CheckEquals('SMALLINT',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Cardinal_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  (* Atenção, Firebird Dialeto 1 retorna Integer, o default é dialoto 3 BIGINT *)
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Cardinal';
    BasicTypeKind          := tkInteger;
    DataSize               := Low(cardinal);
    DataSizeScale          := High(cardinal);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CARDINAL'  ,DataTypeName         ,'Validação 1');
    CheckEquals('BIGINT'    ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Cardinal_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Cardinal_registrado';
    DataSize               := Low(cardinal);
    DataSizeScale          := High(cardinal);
    NativeType             := ntUnknow;
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CARDINAL_REGISTRADO',DataTypeName   ,'Validação 1');
    CheckEquals('INTEGER',FullNameDatabaseType       ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Char_100_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataSize               := 100;
    DataTypeName           := 'Char';
    BasicTypeKind          := tkChar;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CHAR'      ,DataTypeName            ,'Validação 1');
    CheckEquals('CHAR(100)' ,FullNameDatabaseType    ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Char_100_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataSize               := 100;
    DataTypeName           := 'CHAR_100';
    BasicTypeKind          := tkChar;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CHAR_100'  ,DataTypeName         ,'Validação 1');
    CheckEquals('CHAR(100)' ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Char_256_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataSize               := 256;
    DataTypeName           :='Char';
    BasicTypeKind          := tkChar;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('BLOB'    ,DataTypeName ,'Validação 1');
    CheckEquals('BLOB'    ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Char_256_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataSize               := 256;
    DataTypeName           := 'CHAR_256';
    BasicTypeKind          := tkChar;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CHAR_256',DataTypeName         ,'Validação 1');
    CheckEquals('BLOB'    ,FullNameDatabaseType ,'Validação 2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Char_default_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Char';
    BasicTypeKind          := tkChar;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CHAR'       ,DataTypeName         ,'Validação 1');
    CheckEquals('CHAR(255)'  ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Char_default_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataSize               := 0;
    DataTypeName           := 'CHAR_DEFAULT';
    BasicTypeKind          := tkChar;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CHAR_DEFAULT' ,DataTypeName            ,'Validação 1');
    CheckEquals('CHAR(255)'    ,FullNameDatabaseType    ,'Validação 2');
  end;
end;


procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Currency_personalizado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Currency';
    DataSizeScale          := 4;
    BasicTypeKind          := tkFloat;
    (* default *)
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('CURRENCY'     ,DataTypeName          ,'Validação 1 DataTypeName');
    CheckEquals('NUMERIC[18,4]',FullNameDatabaseType  ,'Validação 2 Nome do tipo no banco');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Double;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Double';
    BasicTypeKind          := tkFloat;
    DataSize               := 19;
    DataSizeScale          := 19;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('DOUBLE',DataTypeName                   ,'Validação 1');
    CheckEquals('DOUBLE PRECISION',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Extended;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Extended';
    DataSize               := 0;
    DataSizeScale          := 0;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('EXTENDED',DataTypeName    ,'Validação 1');
    CheckEquals('DOUBLE PRECISION',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Extended_Personalizado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'DPS_Extended';
    DataSize               := 0;
    DataSizeScale          := 0;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('DPS_EXTENDED',DataTypeName    ,'Validação 1');
    CheckEquals('DOUBLE PRECISION',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Int64_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Int64';
    DataSize               := 0;
    BasicTypeKind          := tkInt64;
    (* BIG INT SÓ TEM SUPORTE A PARTIR DO DIALETO 3 *)
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INT64' ,DataTypeName         ,'Validação 1 ');
    CheckEquals('BIGINT',FullNameDatabaseType ,'Validação 2 ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Int64_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Int64Registrado';
    DataSize               := 0;
    BasicTypeKind          := tkInt64;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INT64REGISTRADO',DataTypeName             ,'Validação 1');
    CheckEquals('BIGINT'         ,FullNameDatabaseType     ,'Validação 2  ');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Integer_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    BasicTypeKind          := tkInteger;
    DataSize               := low(integer);
    DataSizeScale          := high(integer);
    DataTypeName           := 'Integer';
    NativeType             := ntDelphiAndDatabase;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER' ,DataTypeName      ,'Validação 1');
    CheckEquals('INTEGER' ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Integer_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Integer_registrado';
    BasicTypeKind          := tkInteger;
    NativeType             := ntUnknow;
    DataSize               := low(Integer);
    DataSizeScale          := high(Integer);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER_REGISTRADO' ,DataTypeName  ,'Validação 1');
    CheckEquals('INTEGER' ,FullNameDatabaseType     ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Longint_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Longint';
    DataSize               := low(longint);
    DataSizeScale          := high(longint);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER'  ,DataTypeName         ,'Validação 1');
    CheckEquals('INTEGER'  ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Longint_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Longint_INTEGER';
    DataSize               := low(longint);
    DataSizeScale          := high(longint);
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('LONGINT_INTEGER' ,DataTypeName ,'Validação 1');
    CheckEquals('INTEGER' ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_LongWord_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'LongWord';
    NativeType             := ntDelphi;
    DataSize               := low(LongWord);
    DataSizeScale          := high(LongWord);
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('BIGINT' ,DataTypeName            ,'Validação 1');
    CheckEquals('BIGINT' ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_LongWord_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'LongWord_BIGINT';
    BasicTypeKind          := tkInt64;
    DataSize               := low(LongWord);
    DataSizeScale          := high(LongWord);
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('LONGWORD_BIGINT',DataTypeName ,'Validação 1');
    CheckEquals('BIGINT' ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_ShortInt;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Shortint';
    DataSize               := Low(Shortint);
    DataSizeScale          := High(Shortint);
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('SHORTINT',DataTypeName         ,'Validação 1');
    CheckEquals('SMALLINT',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_ShortString_100_native;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataSize               := 100;
    DataTypeName           := 'ShortString';
    BasicTypeKind          := tkString;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('VARCHAR' ,DataTypeName             ,'validação 1');
    CheckEquals('VARCHAR(100)',FullNameDatabaseType ,'validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_ShortString_100_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'SHORTSTRING_100';
    DataSize               := 100;
    BasicTypeKind          := tkString;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('SHORTSTRING_100' ,DataTypeName     ,'validação 1');
    CheckEquals('VARCHAR(100)',FullNameDatabaseType ,'validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_ShortString_256_native;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataSize               := 256;
    DataTypeName           := 'ShortString';
    NativeType             := ntDelphi;
    BasicTypeKind          := tkString;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('BLOB' ,DataTypeName ,'validação 1');
    CheckEquals('BLOB' ,FullNameDatabaseType ,'validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_ShortString_256_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'SHORTSTRING_256';
    DataSize               := 256;
    BasicTypeKind          := tkString;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('SHORTSTRING_256' ,DataTypeName ,'validação 1');
    CheckEquals('BLOB',FullNameDatabaseType ,'validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_ShortString_default_native;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'ShortString';
    DataSize               := 0;
    NativeType             := ntDelphi;
    BasicTypeKind          := tkString;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('VARCHAR' ,DataTypeName              ,'validação 1');
    CheckEquals('VARCHAR(255)' ,FullNameDatabaseType ,'validação 2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_ShortString_default_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'SHORTSTRING_DEFAULT';
    DataSize               := 0;
    BasicTypeKind          := tkString;
    NativeType             := ntUnknow;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('SHORTSTRING_DEFAULT' ,DataTypeName    ,'validação 1');
    CheckEquals('VARCHAR(255)' ,FullNameDatabaseType   ,'validação 2');
  end;

end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Single;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Single';
    DataSize               := 3;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('SINGLE',DataTypeName   ,'Validação 1');
    CheckEquals('DOUBLE PRECISION',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_SmallInt_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Smallint';
    BasicTypeKind          := tkInteger;
    DataSize               := low(smallint)+1 ;
    DataSizeScale          := high(smallint)-1;
    NativeType             := ntDelphi;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('SMALLINT' ,DataTypeName         ,'Validação 1');
    CheckEquals('SMALLINT' ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_SmallInt_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Smallint_registrado';
    DataSize               := low(smallint) ;
    DataSizeScale          := high(smallint);
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('SMALLINT_REGISTRADO' ,DataTypeName ,'Validação 1');
    CheckEquals('SMALLINT' ,FullNameDatabaseType    ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_TBitMap;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'TBitMap';
    BasicTypeKind          := tkClass;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('TBITMAP',DataTypeName         ,'Validação 1');
    CheckEquals('BLOB'   ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_TDate;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'TDate';
    DataSize               := -1;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('TDATE',DataTypeName     ,'Validação 1');
    CheckEquals('DATE',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_TDateTime;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'TDateTime';
    DataSize               := -3;
    BasicTypeKind          := tkFloat;
    NativeType             := ntDelphi;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('TDATETIME',DataTypeName          ,'Validação 1');
    CheckEquals('TIMESTAMP',FullNameDatabaseType    ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_TTime;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'TTime';
    DataSize               := -2;
    NativeType             := ntDelphi;
    BasicTypeKind          := tkFloat;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('TTIME',DataTypeName        ,'Validação 1');
    CheckEquals('TIME',FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Word_nativo;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Word';
    DataSize               := Low(Word);
    DataSizeScale          := high(word);
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('INTEGER' ,DataTypeName            ,'Validação 1');
    CheckEquals('INTEGER' ,FullNameDatabaseType ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestConversaoTipo_DelphiParaDatabase_Word_registrado;
var
  data_reflection : TDataReflection;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.ReflectionType := trDelphiToDatabase;// rotina de converter lê nesta propriedade
  with data_reflection do
  begin
    ClassOrTableName       := 'ClasseQualquer';
    PropertyOrColumnName   := 'PropriedadeQualquer';
    DataTypeName           := 'Word_registrado';
    DataSize               := Low(Word);
    DataSizeScale          := high(word);
    BasicTypeKind          := tkInteger;
    FMasterDatamanagerTest.ConvertDataType(data_reflection);
    CheckEquals('WORD_REGISTRADO' ,DataTypeName    ,'Validação 1');
    CheckEquals('INTEGER' ,FullNameDatabaseType    ,'Validação 2');
  end;
end;

procedure TestTMasterDatamanagerTest.TestCriacaoDeTipoAPartirDo_Firebird;
var
  slTipos:TStringList;
  i:Integer;
begin
  slTipos := TStringList.Create;
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  FMasterDatamanagerTest.GenerateNewDelphiTypesFromDatabase(slTipos);

  CheckEquals(True, True);
//  CheckEquals(True, slTipos.IndexOf('TEXT')<> -1 ,'1º - Tipo TEXT não será criado na Unit do corretamente');
//  CheckEquals(True, slTipos.IndexOf('BOOLEAN')<> -1 ,'2º - Tipo dps_String_200 não será criado na Unit do corretamente');
//  CheckEquals(True, slTipos.IndexOf('DPS_STRING_200')<> -1 ,'3º - Tipo dps_String_200 não será criado na Unit do corretamente');
//  CheckEquals(True, slTipos.IndexOf('DPS_STRING_100')<> -1 ,'4º - Tipo dps_String_100 não será criado na Unit do corretamente');
//  CheckEquals(True, slTipos.IndexOf('SETDEENUMERACAO')<> -1 ,'5º - Tipo SetDeEnumeracao não será criado na Unit do corretamente');

end;

procedure TestTMasterDatamanagerTest.TesteSeCampoFoiCriado_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.FieldInTableExists('DBMODELTESTE','CAMPOENUMERADO'),'O "CampoEnumerado" não foi criado na tabela DBModelTeste!');
end;

procedure TestTMasterDatamanagerTest.TesteSeIndiceFoiCriado_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.IndexExists('IDXCAMPONOME'),'O Índice não foi criado na tabela DBModelTeste!');
end;

procedure TestTMasterDatamanagerTest.TesteSeChavePrimariaFoiCriada_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.ConstraintExists('PKCAMPOID'),'A Chave primária não foi criada na tabela DBModelTeste!');
end;

procedure TestTMasterDatamanagerTest.TesteSeChaveUnicaFoiCriada_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.ConstraintExists('UKDBModelTeste'),'A Chave única não foi criada na tabela DBModelTeste!');
end;

procedure TestTMasterDatamanagerTest.TesteSeChaveEstrangeiraFoiCriada_Firebird;
begin
  FMasterDatamanagerTest := TMasterDatamanagerTest.Create;
  CheckEquals(True,FMasterDatamanagerTest.ConstraintExists('FKREFERENCIACAMPOIDMODEL'),'A Chave estrangeira não foi criada na tabela DBModelDetalheTeste!');
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMasterDatamanagerTest.Suite);
end.

